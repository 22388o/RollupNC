var RollupNC = artifacts.require("RollupNC");

/*
    Here we want to test the smart contract state transition functionality.
*/ 

contract("RollupNC State Transition", async accounts => {

  const a = [
        "2774348242701256694808898424261749995751261240739215801022020727746138206191",
        "20893670445867012532748657256717898054980051323802999177829732864506123029408"
    ]
  const b = [
        [
        "11812849236578065655173545214746952261001702674491145916741177656737151596454",
        "8805178315415890439189508328474374699061750846250187977769801450860206238862"
        ],
        [
        "14221824339163860668616968598437736032113860220011326505503867454407755978358",
        "9538604269498691889486862930086109225394516615797695405039695592639308339710"
        ]
    ]
  const c = [
    "16865030899148932645125716017186641724658883762599617106542629737755314364452",
    "14908652378070804233265169609440202514740879523578515157320478503928354132936"
    ]
  const input = [
    "17805935508786521868498852672617303909388471961737174356134265298826195303538",
    "149126198147162084281232535967801344773039936115368629187002798446712412021",
    "14886574706458175320365562183535633177659988860374212743469231355432009552053"
    ]

  // it("should reject invalid state updates", async () => {

  // });

  it("should accept valid state updates", async () => {
    let rollupnc = await RollupNC.deployed();
    let validStateUpdate = await rollupnc.updateState(
          a, b, c, input
        );
    assert(validStateUpdate, "invalid state transition");
  });

});